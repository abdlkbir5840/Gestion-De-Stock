    @Bean
    CommandLineRunner start(BankAccountRepository bankAccountRepository,
                            CustomerRepository customerRepository,
                            AccountOperationRepository accountOperationRepository){
        return args -> {
            Stream.of("Rachid","Abdelkabir","Youssef").forEach(name->{
                Customer customer = new Customer();
                customer.setName(name);
                customer.setEmail(name+"@gmail.com");
                customerRepository.save(customer);
            });
            customerRepository.findAll().forEach(cust->{
                CurrentAccount currentAccount = new CurrentAccount();
                currentAccount.setId(UUID.randomUUID().toString());
                currentAccount.setBalance(Math.random()*99999);
                currentAccount.setCreateDate(new Date());
                currentAccount.setStatus(AccountStatus.CREATED);
                currentAccount.setCustomer(cust);
                currentAccount.setOverDraft(9000);
                bankAccountRepository.save(currentAccount);

                SavingAccount savingAccount = new SavingAccount();
                savingAccount.setId(UUID.randomUUID().toString());
                savingAccount.setBalance(Math.random()*99999);
                savingAccount.setCreateDate(new Date());
                savingAccount.setStatus(AccountStatus.CREATED);
                savingAccount.setCustomer(cust);
                savingAccount.setInterestRate(7.6);
                bankAccountRepository.save(savingAccount);

            });
            bankAccountRepository.findAll().forEach(account->{
                for(int i=0;i<5;i++){
                    AccountOperation accountOperation = new AccountOperation();
                    accountOperation.setOperationDate(new Date());
                    accountOperation.setAmount(Math.random()*12000);
                    accountOperation.setType(Math.random()>0.5? OperationType.DEBIT:OperationType.CREDIT);
                    accountOperation.setBankAccount(account);
                    accountOperationRepository.save(accountOperation);
                }

            });
        };
    }












 @Autowired
    private BankAccountRepository bankAccountRepository;
    public void consulter(){
        BankAccount bankAccount =
                bankAccountRepository.findById("3f37d5f8-827f-4a34-a880-6f2bbd93e164").orElse(null);
        System.out.println("**********************************************************");
        System.out.println(bankAccount.getId());
        System.out.println(bankAccount.getBalance());
        System.out.println(bankAccount.getStatus());
        System.out.println(bankAccount.getCustomer().getName());
        System.out.println(bankAccount.getCreateDate());
        System.out.println(bankAccount.getClass().getSimpleName());
        if(bankAccount instanceof CurrentAccount){
            System.out.println("Over draft"+((CurrentAccount) bankAccount).getOverDraft());
        }else if(bankAccount instanceof SavingAccount){
            System.out.println("Rate"+((SavingAccount) bankAccount).getInterestRate());
        }
        System.out.println("----------------------Les Opperations-------------------------");
        bankAccount.getAccountOperations().forEach(op->{
            System.out.println(op.getType()+" "+op.getAmount()+" "+op.getOperationDate());
        });
    }








